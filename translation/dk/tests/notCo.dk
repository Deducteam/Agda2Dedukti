TYPE__Tree : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
Tree : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.code (Agda.set univ.0)))).
[A] Agda.Term _ (Tree A) --> TYPE__Tree A.
def Tree__elem : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.proj_prod (Agda.set univ.0) (Agda.set univ.0) (Tree A) (r => A)))).
def Tree__subtrees : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.proj_prod (Agda.set univ.0) (Agda.set univ.0) (Tree A) (r => (Agda__Builtin__List.List univ.0 (Tree A)))))).
tree : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (elem => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__List.List univ.0 (Tree A)) (subtrees => (Tree A))))))).
[A, y] Agda.etaExpand _ (Tree A) y --> tree A (Agda.etaExpand univ.0 A (Tree__elem A y)) (Agda.etaExpand univ.0 (Agda__Builtin__List.List univ.0 (Tree A)) (Tree__subtrees A y)).
 
[A, elem, subtrees] Tree__elem A (tree A elem subtrees) --> Agda.etaExpand univ.0 A elem.
 
[A, elem, subtrees] Tree__subtrees A (tree A elem subtrees) --> Agda.etaExpand univ.0 (Agda__Builtin__List.List univ.0 (Tree A)) subtrees.
 

