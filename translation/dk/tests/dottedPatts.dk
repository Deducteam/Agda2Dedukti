TYPE__N : Type.
N : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)).
[] Agda.Term _ N --> TYPE__N.
N__zero : Agda.Term (Agda.set univ.0) N.
N__suc : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (_0 => N)).
[] Agda.etaExpand _ N N__zero --> N__zero.
[x] Agda.etaExpand _ N (N__suc x) --> N__suc (Agda.etaExpand univ.0 N x).
 


TYPE__Neq : (_0 : Agda.Term (Agda.set univ.0) N) -> (_0 : Agda.Term (Agda.set univ.0) N) -> Type.
Neq : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) N (_0 => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) N (_0 => (Agda.code (Agda.set univ.0)))))).
[x0, x] Agda.Term _ (Neq x0 x) --> TYPE__Neq (Agda.etaExpand univ.0 N x0) (Agda.etaExpand univ.0 N x).
Neq__refl : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Neq (Agda.etaExpand univ.0 N x) (Agda.etaExpand univ.0 N x)))).
[x] Agda.etaExpand _ (Neq _ _) (Neq__refl x) --> Neq__refl (Agda.etaExpand univ.0 N x).
 

def cong : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq (Agda.etaExpand univ.0 N x) (Agda.etaExpand univ.0 N y)) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (_0 => N)) (f => (Neq (Agda.etaExpand univ.0 N (f (Agda.etaExpand univ.0 N x))) (Agda.etaExpand univ.0 N (f (Agda.etaExpand univ.0 N y)))))))))))).
[x, f] cong x {Agda.etaExpand univ.0 N x} (Neq__refl {Agda.etaExpand univ.0 N x}) f --> Agda.etaExpand univ.0 (Neq (Agda.etaExpand univ.0 N (f (Agda.etaExpand univ.0 N x))) (Agda.etaExpand univ.0 N (f (Agda.etaExpand univ.0 N x)))) (Neq__refl (Agda.etaExpand univ.0 N (f (Agda.etaExpand univ.0 N x)))).
 
