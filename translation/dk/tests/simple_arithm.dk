TYPE__false : Type.
false : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)).
[] Agda.Term _ false --> TYPE__false.

def fimp : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) false (_0 => A)))).

TYPE__exists : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (P : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) A (_0 => (Agda.code (Agda.set univ.0))))) -> Type.
exists : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) A (_0 => (Agda.code (Agda.set univ.0)))) (P => (Agda.code (Agda.set univ.0)))))).
[A, P] Agda.Term _ (exists A P) --> TYPE__exists A P.
exists__exintro : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) A (_0 => (Agda.code (Agda.set univ.0)))) (P => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (a => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (P a) (p => (exists A P))))))))).


TYPE__or : (_0 : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (_0 : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
or : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (_0 => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (_0 => (Agda.code (Agda.set univ.0)))))).
[x0, x] Agda.Term _ (or x0 x) --> TYPE__or x0 x.
or__orl : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (a => (or A B))))))).
or__orr : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) B (b => (or A B))))))).



TYPE__and : (_0 : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (_0 : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
and : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (_0 => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (_0 => (Agda.code (Agda.set univ.0)))))).
[x0, x] Agda.Term _ (and x0 x) --> TYPE__and x0 x.
and__inand : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (a => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) B (b => (and A B))))))))).


TYPE__N : Type.
N : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)).
[] Agda.Term _ N --> TYPE__N.
N__zero : Agda.Term (Agda.set univ.0) N.
N__suc : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (_0 => N)).



TYPE__Neq : (_0 : Agda.Term (Agda.set univ.0) N) -> (_0 : Agda.Term (Agda.set univ.0) N) -> Type.
Neq : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) N (_0 => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) N (_0 => (Agda.code (Agda.set univ.0)))))).
[x0, x] Agda.Term _ (Neq x0 x) --> TYPE__Neq x0 x.
Neq__refl : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Neq x x))).


def cong : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq x y) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (_0 => N)) (f => (Neq (f x) (f y)))))))))).
[x, f] cong x x (Neq__refl x) f --> Neq__refl (f x).
 
def sym : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq x y) (_0 => (Neq y x))))))).
[x] sym x x (Neq__refl x) --> Neq__refl x.
 
def trs : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N ({|!z|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq x y) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq y {|!z|}) (_0 => (Neq x {|!z|}))))))))))).
[x] trs x x x (Neq__refl x) (Neq__refl x) --> Neq__refl x.
 
def suc0 : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq (N__suc x) N__zero) (_0 => false)))).

def sum : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (_0 => N)))).
[x] sum N__zero x --> x.
[x0, x] sum (N__suc x0) x --> N__suc (sum x0 x).
 
def sum0 : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Neq x (sum x N__zero)))).
[] sum0 N__zero --> Neq__refl N__zero.
[x] sum0 (N__suc x) --> cong x (sum x N__zero) (sum0 x) N__suc.
 
def sumassos : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N ({|!z|} => (Neq (sum x (sum y {|!z|})) (sum (sum x y) {|!z|})))))))).
def {|!with-138|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N ({|!z|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq (sum x (sum y {|!z|})) (sum (sum x y) {|!z|})) (w => (Neq (N__suc (sum x (sum y {|!z|}))) (N__suc (sum (sum x y) {|!z|}))))))))))).
[y, {|!z|}] sumassos N__zero y {|!z|} --> Neq__refl (sum y {|!z|}).
[x, y, {|!z|}] sumassos (N__suc x) y {|!z|} --> {|!with-138|} x y {|!z|} (sumassos x y {|!z|}).
 
[x, y, {|!z|}, w] {|!with-138|} x y {|!z|} w --> cong (sum x (sum y {|!z|})) (sum (sum x y) {|!z|}) w N__suc.
 
def sumcom : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Neq (sum x y) (sum y x)))))).
[] sumcom N__zero N__zero --> Neq__refl N__zero.
[y] sumcom N__zero (N__suc y) --> sum0 (N__suc y).
[x] sumcom (N__suc x) N__zero --> sym (sum N__zero (N__suc x)) (sum (N__suc x) N__zero) (sum0 (N__suc x)).
[x, y] sumcom (N__suc x) (N__suc y) --> cong (sum x (N__suc y)) (sum y (N__suc x)) (trs (sum x (N__suc y)) (sum (N__suc y) x) (sum y (N__suc x)) (sumcom x (N__suc y)) (trs (sum (N__suc y) x) (N__suc (sum x y)) (sum y (N__suc x)) (cong (sum y x) (sum x y) (sumcom y x) N__suc) (sumcom (N__suc x) y))) N__suc.
 
def mult : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (_0 => N)))).
[x] mult N__zero x --> N__zero.
[x0, x] mult (N__suc x0) x --> sum x (mult x0 x).
 
def mult0 : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Neq N__zero (mult x N__zero)))).
[] mult0 N__zero --> Neq__refl N__zero.
[x] mult0 (N__suc x) --> mult0 x.
 
def multcom : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Neq (mult x y) (mult y x)))))).
[] multcom N__zero N__zero --> Neq__refl N__zero.
[y] multcom N__zero (N__suc y) --> mult0 (N__suc y).
[x] multcom (N__suc x) N__zero --> sym (mult N__zero (N__suc x)) (mult (N__suc x) N__zero) (mult0 (N__suc x)).
[x, y] multcom (N__suc x) (N__suc y) --> cong (sum y (mult x (N__suc y))) (sum x (mult y (N__suc x))) (trs (sum y (mult x (N__suc y))) (sum y (mult (N__suc y) x)) (sum x (mult y (N__suc x))) (cong (mult x (N__suc y)) (mult (N__suc y) x) (multcom x (N__suc y)) (sum y)) (trs (sum y (mult (N__suc y) x)) (sum x (sum y (mult x y))) (sum x (mult y (N__suc x))) (trs (sum y (mult (N__suc y) x)) (sum (sum y x) (mult y x)) (sum x (sum y (mult x y))) (sumassos y x (mult y x)) (trs (sum (sum y x) (mult y x)) (sum (sum x y) (mult x y)) (sum x (sum y (mult x y))) (trs (sum (sum y x) (mult y x)) (sum (sum x y) (mult y x)) (sum (sum x y) (mult x y)) (cong (sum y x) (sum x y) (sumcom y x) (a => sum a (mult y x))) (cong (mult y x) (mult x y) (multcom y x) (sum (sum x y)))) (sym (sum x (sum y (mult x y))) (sum (sum x y) (mult x y)) (sumassos x y (mult x y))))) (cong (mult (N__suc x) y) (mult y (N__suc x)) (multcom (N__suc x) y) (sum x)))) N__suc.
 
TYPE__Nleq : (_0 : Agda.Term (Agda.set univ.0) N) -> (_0 : Agda.Term (Agda.set univ.0) N) -> Type.
Nleq : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) N (_0 => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) N (_0 => (Agda.code (Agda.set univ.0)))))).
[x0, x] Agda.Term _ (Nleq x0 x) --> TYPE__Nleq x0 x.
Nleq__0leq : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Nleq N__zero x))).
Nleq__Sleq : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq x y) (_0 => (Nleq (N__suc x) (N__suc y)))))))).



def exm : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (or (Nleq x y) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq x y) (_0 => false))))))).
def {|!with-226|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (or (Nleq x y) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq x y) (_0 => false))) (w => (or (Nleq (N__suc x) (N__suc y)) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq (N__suc x) (N__suc y)) (_0 => false))))))))).
def {|!'extendedlambda0|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq x y) (_0 => false)) (b => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq (N__suc x) (N__suc y)) (_0 => false)))))))).
def {|!'absurdlambda-2941|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq (N__suc x) N__zero) (_0 => false)))).
[y] exm N__zero y --> or__orl (Nleq N__zero y) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq N__zero y) (_0 => false)) (Nleq__0leq y).
[x] exm (N__suc x) N__zero --> or__orr (Nleq (N__suc x) N__zero) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq (N__suc x) N__zero) (_0 => false)) ({|!'absurdlambda-2941|} x).
[x, y] exm (N__suc x) (N__suc y) --> {|!with-226|} x y (exm x y).
 
[x, y, a] {|!with-226|} x y (or__orl {Nleq x y} {Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq x y) (_0 => false)} a) --> or__orl (Nleq (N__suc x) (N__suc y)) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq (N__suc x) (N__suc y)) (_0 => false)) (Nleq__Sleq x y a).
[x, y, b] {|!with-226|} x y (or__orr {Nleq x y} {Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq x y) (_0 => false)} b) --> or__orr (Nleq (N__suc x) (N__suc y)) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq (N__suc x) (N__suc y)) (_0 => false)) ({|!'extendedlambda0|} x y b).
 
[x0, y, b, x] {|!'extendedlambda0|} x0 y b (Nleq__Sleq x0 y x) --> b x.
 

def strictornot : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq x y) (_0 => (or (Neq x y) (Nleq (N__suc x) y)))))))).
def {|!with-266|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq x y) (p => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (or (Neq x y) (Nleq (N__suc x) y)) (w => (or (Neq (N__suc x) (N__suc y)) (Nleq (N__suc (N__suc x)) (N__suc y))))))))))).
[x] strictornot N__zero N__zero x --> or__orl (Neq N__zero N__zero) (Nleq (N__suc N__zero) N__zero) (Neq__refl N__zero).
[y, x] strictornot N__zero (N__suc y) x --> or__orr (Neq N__zero (N__suc y)) (Nleq (N__suc N__zero) (N__suc y)) (Nleq__Sleq N__zero y (Nleq__0leq y)).
[x0, y, x] strictornot (N__suc x0) (N__suc y) (Nleq__Sleq x0 y x) --> {|!with-266|} x0 y x (strictornot x0 y x).
 
[x, p] {|!with-266|} x x p (or__orl {Neq x x} {Nleq (N__suc x) x} (Neq__refl x)) --> or__orl (Neq (N__suc x) (N__suc x)) (Nleq (N__suc (N__suc x)) (N__suc x)) (Neq__refl (N__suc x)).
[x, y, p, b] {|!with-266|} x y p (or__orr {Neq x y} {Nleq (N__suc x) y} b) --> or__orr (Neq (N__suc x) (N__suc y)) (Nleq (N__suc (N__suc x)) (N__suc y)) (Nleq__Sleq (N__suc x) y b).
 
def minus : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq y x) (p => (exists N (a => Neq x (sum y a))))))))).
def {|!with-304|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq y x) (p => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (exists N (a => Neq x (sum y a))) (w => (exists N (a => Neq (N__suc x) (N__suc (sum y a)))))))))))).
[p] minus N__zero N__zero p --> exists__exintro N (a => Neq N__zero (sum N__zero a)) N__zero (Neq__refl N__zero).
[x, p] minus (N__suc x) N__zero p --> exists__exintro N (a => Neq (N__suc x) (sum N__zero a)) (N__suc x) (Neq__refl (N__suc x)).
[x, y, p] minus (N__suc x) (N__suc y) (Nleq__Sleq y x p) --> {|!with-304|} x y p (minus x y p).
 
[x, y, p0, a, p] {|!with-304|} x y p0 (exists__exintro {N} {a0 => Neq x (sum y a0)} a p) --> exists__exintro N (a0 => Neq (N__suc x) (N__suc (sum y a0))) a (cong x (sum y a) p N__suc).
 
def euclid : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq y N__zero) (_0 => false)) (p => (exists N (p => exists N (r => and (Nleq (N__suc r) y) (Neq x (sum (mult y p) r))))))))))).
def {|!with-344|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq y N__zero) (_0 => false)) (p => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (exists N (p0 => exists N (r => and (Nleq (N__suc r) y) (Neq x (sum (mult y p0) r))))) (w => (exists N (p0 => exists N (r => and (Nleq (N__suc r) y) (Neq (N__suc x) (sum (mult y p0) r))))))))))))).
def {|!with-362|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (a2 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Nleq (N__suc a2) y) (b1 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (or (Neq (N__suc a2) y) (Nleq (N__suc (N__suc a2)) y)) (w => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq y N__zero) (_0 => false)) (p => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) N (a => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Neq x (sum (mult y a) a2)) (b2 => (exists N (p0 => exists N (r => and (Nleq (N__suc r) y) (Neq (N__suc x) (sum (mult y p0) r))))))))))))))))))))).
[x, p] euclid x N__zero p --> fimp (exists N (p0 => exists N (r => and (Nleq (N__suc r) N__zero) (Neq x (sum (mult N__zero p0) r))))) (p (Neq__refl N__zero)).
[y, p] euclid N__zero (N__suc y) p --> exists__exintro N (p0 => exists N (r => and (Nleq (N__suc r) (N__suc y)) (Neq N__zero (sum (mult (N__suc y) p0) r)))) N__zero (exists__exintro N (r => and (Nleq (N__suc r) (N__suc y)) (Neq N__zero (sum (mult (N__suc y) N__zero) r))) N__zero (and__inand (Nleq (N__suc N__zero) (N__suc y)) (Neq N__zero (sum (mult (N__suc y) N__zero) N__zero)) (Nleq__Sleq N__zero y (Nleq__0leq y)) (trs N__zero (mult y N__zero) (sum (mult (N__suc y) N__zero) N__zero) (mult0 y) (sum0 (mult y N__zero))))).
[x, y, p] euclid (N__suc x) (N__suc y) p --> {|!with-344|} x (N__suc y) p (euclid x (N__suc y) p).
 
[x, y, p, a1, a0, a, b] {|!with-344|} x y p (exists__exintro {N} {p0 => exists N (r => and (Nleq (N__suc r) y) (Neq x (sum (mult y p0) r)))} a1 (exists__exintro {N} {r => and (Nleq (N__suc r) y) (Neq x (sum (mult y a1) r))} a0 (and__inand {Nleq (N__suc a0) y} {Neq x (sum (mult y a1) a0)} a b))) --> {|!with-362|} y a0 a (strictornot (N__suc a0) y a) x p a1 b.
 
[y, b1, p, a] {|!with-362|} (N__suc y) y b1 (or__orl {Neq (N__suc y) (N__suc y)} {Nleq (N__suc (N__suc y)) (N__suc y)} (Neq__refl {N__suc y})) {sum (mult (N__suc y) a) y} p a (Neq__refl {sum (mult (N__suc y) a) y}) --> exists__exintro N (p0 => exists N (r => and (Nleq (N__suc r) (N__suc y)) (Neq (N__suc (sum (mult (N__suc y) a) y)) (sum (mult (N__suc y) p0) r)))) (N__suc a) (exists__exintro N (r => and (Nleq (N__suc r) (N__suc y)) (Neq (N__suc (sum (mult (N__suc y) a) y)) (sum (mult (N__suc y) (N__suc a)) r))) N__zero (and__inand (Nleq (N__suc N__zero) (N__suc y)) (Neq (N__suc (sum (mult (N__suc y) a) y)) (sum (mult (N__suc y) (N__suc a)) N__zero)) (Nleq__Sleq N__zero y (Nleq__0leq y)) (cong (sum (sum a (mult y a)) y) (sum (sum a (mult y (N__suc a))) N__zero) (trs (sum (sum a (mult y a)) y) (sum a (mult y (N__suc a))) (sum (sum a (mult y (N__suc a))) N__zero) (trs (sum (sum a (mult y a)) y) (sum a (sum (mult y a) y)) (sum a (mult y (N__suc a))) (sym (sum a (sum (mult y a) y)) (sum (sum a (mult y a)) y) (sumassos a (mult y a) y)) (cong (sum (mult y a) y) (mult y (N__suc a)) (trs (sum (mult y a) y) (sum y (mult y a)) (mult y (N__suc a)) (sumcom (mult y a) y) (trs (sum y (mult y a)) (sum y (mult a y)) (mult y (N__suc a)) (cong (mult y a) (mult a y) (multcom y a) (sum y)) (multcom (N__suc a) y))) (sum a))) (sum0 (sum a (mult y (N__suc a))))) N__suc))).
[y, a2, b1, b, x, p, a, b2] {|!with-362|} y a2 b1 (or__orr {Neq (N__suc a2) y} {Nleq (N__suc (N__suc a2)) y} b) x p a b2 --> exists__exintro N (p0 => exists N (r => and (Nleq (N__suc r) y) (Neq (N__suc x) (sum (mult y p0) r)))) a (exists__exintro N (r => and (Nleq (N__suc r) y) (Neq (N__suc x) (sum (mult y a) r))) (N__suc a2) (and__inand (Nleq (N__suc (N__suc a2)) y) (Neq (N__suc x) (sum (mult y a) (N__suc a2))) b (trs (N__suc x) (N__suc (sum a2 (mult y a))) (sum (mult y a) (N__suc a2)) (cong x (sum a2 (mult y a)) (trs x (sum (mult y a) a2) (sum a2 (mult y a)) b2 (sumcom (mult y a) a2)) N__suc) (sumcom (N__suc a2) (mult y a))))).
 
