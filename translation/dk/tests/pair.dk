TYPE__X : Type.
X : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)).
[] Agda.Term _ X --> TYPE__X.
X__arr : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) X (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) X (_0 => X)))).


TYPE__and : (_0 : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (_0 : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
and : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (_0 => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (_0 => (Agda.code (Agda.set univ.0)))))).
[x0, x] Agda.Term _ (and x0 x) --> TYPE__and x0 x.
and__pair : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (and A B))))).


def subtype : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) X (_0 => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) X (_0 => (Agda.code (Agda.set univ.0)))))).
[x2, x1, x0, x] subtype (X__arr x2 x1) (X__arr x0 x) --> and (subtype x0 x2) (subtype x1 x).
 
