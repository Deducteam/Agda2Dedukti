TYPE__Stream : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
Stream : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.code (Agda.set univ.0)))).
[A] Agda.Term _ (Stream A) --> TYPE__Stream A.
{|!Stream___∷_|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream A)) (xs => (Stream A))))))).
[A, x, xs] Agda.etaExpand _ (Stream _) ({|!Stream___∷_|} A x xs) --> {|!Stream___∷_|} A (Agda.etaExpand univ.0 A x) xs.
 

def makeStream : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (_0 => (Stream Agda__Builtin__Nat.Nat))).
def {|!___♯-0|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (n => (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)))).
[x] makeStream x --> Agda.etaExpand univ.0 (Stream Agda__Builtin__Nat.Nat) ({|!Stream___∷_|} Agda__Builtin__Nat.Nat (Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat x) ({|!___♯-0|} (Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat x))).
 
[n] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream Agda__Builtin__Nat.Nat} ({|!___♯-0|} n) --> Agda.etaExpand univ.0 (Stream Agda__Builtin__Nat.Nat) (makeStream (Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat n)).
 
def times2 : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (_0 => (Stream Agda__Builtin__Nat.Nat))).
def {|!___♯-1|} : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (hd => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)) (tl => (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)))))).
[x, xs] times2 ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) --> Agda.etaExpand univ.0 (Stream Agda__Builtin__Nat.Nat) ({|!Stream___∷_|} Agda__Builtin__Nat.Nat (Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat (Agda__Builtin__Nat.{|!_+_|} (Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat x) (Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat x))) ({|!___♯-1|} (Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat x) xs)).
 
[hd, tl] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream Agda__Builtin__Nat.Nat} ({|!___♯-1|} hd tl) --> Agda.etaExpand univ.0 (Stream Agda__Builtin__Nat.Nat) (times2 (Agda.etaExpand univ.0 (Stream Agda__Builtin__Nat.Nat) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) tl))).
 
def nth : Agda.Term (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) Agda__Builtin__Nat.Nat (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat) (_0 => Agda__Builtin__Nat.Nat)))).
[x, xs] nth Agda__Builtin__Nat.Nat__zero ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) --> Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat x.
[x0, x, xs] nth (Agda__Builtin__Nat.Nat__suc x0) ({|!Stream___∷_|} {Agda__Builtin__Nat.Nat} x xs) --> Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat (nth (Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat x0) (Agda.etaExpand univ.0 (Stream Agda__Builtin__Nat.Nat) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream Agda__Builtin__Nat.Nat) xs))).
 
def zeros : Agda.Term (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat).
def {|!♯-2|} : Agda.Term (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream Agda__Builtin__Nat.Nat)).

[] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream Agda__Builtin__Nat.Nat} {|!♯-2|} --> Agda.etaExpand univ.0 (Stream Agda__Builtin__Nat.Nat) zeros.
 
TYPE__SP : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (B : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
SP : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (B => (Agda.code (Agda.set univ.0)))))).
[A, B] Agda.Term _ (SP A B) --> TYPE__SP A B.
SP__get : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (_0 => (SP A B))) (f => (SP A B))))))).
SP__put : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) B (b => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (SP A B)) (sp => (SP A B))))))))).
[A, B, f] Agda.etaExpand _ (SP _ _) (SP__get A B f) --> SP__get A B (_0 => Agda.etaExpand univ.0 (SP A B) (f (Agda.etaExpand univ.0 A _0))).
[A, B, b, sp] Agda.etaExpand _ (SP _ _) (SP__put A B b sp) --> SP__put A B (Agda.etaExpand univ.0 B b) sp.
 


def eat : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (SP A B) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (_0 => (Stream B))))))))).
def {|!___♯-3|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) B (b => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (SP A B)) (sp => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) ({|!as|} => (Agda__Builtin__Coinduction.{|!∞|} univ.0 (Stream B)))))))))))).
[A, B, f, x, xs] eat A B (SP__get A B f) ({|!Stream___∷_|} A x xs) --> Agda.etaExpand univ.0 (Stream B) (eat A B (Agda.etaExpand univ.0 (SP A B) (f (Agda.etaExpand univ.0 A x))) (Agda.etaExpand univ.0 (Stream A) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (Stream A) xs))).
[A, B, b, sp, x] eat A B (SP__put A B b sp) x --> Agda.etaExpand univ.0 (Stream B) ({|!Stream___∷_|} B (Agda.etaExpand univ.0 B b) ({|!___♯-3|} A B (Agda.etaExpand univ.0 B b) sp (Agda.etaExpand univ.0 (Stream A) x))).
 
[A, B, b, sp, {|!as|}] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {Stream B} ({|!___♯-3|} A B b sp {|!as|}) --> Agda.etaExpand univ.0 (Stream B) (eat A B (Agda.etaExpand univ.0 (SP A B) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (SP A B) sp)) (Agda.etaExpand univ.0 (Stream A) {|!as|})).
 
def {|!_∘_|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (C => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (SP B C) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (SP A B) (_0 => (SP A C))))))))))).
def {|!___♯-4|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (C => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) C (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda__Builtin__Coinduction.{|!∞|} univ.0 (SP B C)) ({|!sp₁|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (SP A B) ({|!sp₂|} => (Agda__Builtin__Coinduction.{|!∞|} univ.0 (SP A C)))))))))))))).
[A, B, C, f0, f] {|!_∘_|} A B C (SP__get B C f0) (SP__get A B f) --> Agda.etaExpand univ.0 (SP A C) (SP__get A C (x => Agda.etaExpand univ.0 (SP A C) ({|!_∘_|} A B C (Agda.etaExpand univ.0 (SP B C) (SP__get B C (_0 => Agda.etaExpand univ.0 (SP B C) (f0 (Agda.etaExpand univ.0 B _0))))) (Agda.etaExpand univ.0 (SP A B) (f (Agda.etaExpand univ.0 A x)))))).
[A, B, C, f, b, sp] {|!_∘_|} A B C (SP__get B C f) (SP__put A B b sp) --> Agda.etaExpand univ.0 (SP A C) ({|!_∘_|} A B C (Agda.etaExpand univ.0 (SP B C) (f (Agda.etaExpand univ.0 B b))) (Agda.etaExpand univ.0 (SP A B) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (SP A B) sp))).
[A, B, C, b, sp, x] {|!_∘_|} A B C (SP__put B C b sp) x --> Agda.etaExpand univ.0 (SP A C) (SP__put A C (Agda.etaExpand univ.0 C b) ({|!___♯-4|} A B C (Agda.etaExpand univ.0 C b) sp (Agda.etaExpand univ.0 (SP A B) x))).
 
[A, B, C, x, {|!sp₁|}, {|!sp₂|}] Agda__Builtin__Coinduction.{|!♭|} {univ.0} {SP A C} ({|!___♯-4|} A B C x {|!sp₁|} {|!sp₂|}) --> Agda.etaExpand univ.0 (SP A C) ({|!_∘_|} A B C (Agda.etaExpand univ.0 (SP B C) (Agda__Builtin__Coinduction.{|!♭|} univ.0 (SP B C) {|!sp₁|})) (Agda.etaExpand univ.0 (SP A B) {|!sp₂|})).
 
