TYPE__Stream : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> Type.
Stream : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.code (Agda.set univ.0)))).
[A] Agda.Term _ (Stream A) --> TYPE__Stream A.
{|!Stream'constructor|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (hd => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (tl => (Stream A))))))).
def Stream__hd : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.proj_prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (r => A)))).
def Stream__tl : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.proj_prod (Agda.set univ.0) (Agda.set univ.0) (Stream A) (r => (Stream A))))).

[A, y] Agda.etaExpand _ (Stream A) y --> y.
 
[A, hd, tl] Stream__hd A ({|!Stream'constructor|} A hd tl) --> Agda.etaExpand univ.0 A hd.
 
[A, hd, tl] Stream__tl A ({|!Stream'constructor|} A hd tl) --> tl.
 
def {|!zeros'|} : Agda.Term (Agda.set univ.0) (Stream Agda__Builtin__Nat.Nat).
[] Stream__hd {Agda__Builtin__Nat.Nat} {|!zeros'|} --> Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat Agda__Builtin__Nat.Nat__zero.
[] Stream__hd {Agda__Builtin__Nat.Nat} (Stream__tl {Agda__Builtin__Nat.Nat} {|!zeros'|}) --> Agda.etaExpand univ.0 Agda__Builtin__Nat.Nat (Agda__Builtin__Nat.Nat__suc Agda__Builtin__Nat.Nat__zero).
[] Stream__tl {Agda__Builtin__Nat.Nat} (Stream__tl {Agda__Builtin__Nat.Nat} {|!zeros'|}) --> {|!zeros'|}.
 
