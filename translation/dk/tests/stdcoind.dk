TYPE__Thunk : ({|!ℓ|} : univ.Lvl) -> (F : Agda.Term (Agda.set (univ.s {|!ℓ|})) (Agda.code (Agda.set {|!ℓ|}))) -> Type.
Thunk : Agda.Term Agda.sortOmega (Agda.qLevel ({|!ℓ|} => Agda.set (univ.s {|!ℓ|})) ({|!ℓ|} => Agda.prod (Agda.set (univ.s {|!ℓ|})) (Agda.set (univ.s {|!ℓ|})) (Agda.code (Agda.set {|!ℓ|})) (F => (Agda.code (Agda.set {|!ℓ|}))))).
[{|!ℓ|}, F] Agda.Term _ (Thunk {|!ℓ|} F) --> TYPE__Thunk {|!ℓ|} F.
{|!Thunk'constructor|} : Agda.Term Agda.sortOmega (Agda.qLevel ({|!ℓ|} => Agda.set (univ.s {|!ℓ|})) ({|!ℓ|} => Agda.prod (Agda.set (univ.s {|!ℓ|})) (Agda.set {|!ℓ|}) (Agda.code (Agda.set {|!ℓ|})) (F => (Agda.prod (Agda.set {|!ℓ|}) (Agda.set {|!ℓ|}) F (force => (Thunk {|!ℓ|} F)))))).
def Thunk__force : Agda.Term Agda.sortOmega (Agda.qLevel ({|!ℓ|} => Agda.set (univ.s {|!ℓ|})) ({|!ℓ|} => Agda.prod (Agda.set (univ.s {|!ℓ|})) (Agda.set {|!ℓ|}) (Agda.code (Agda.set {|!ℓ|})) (F => (Agda.proj_prod (Agda.set {|!ℓ|}) (Agda.set {|!ℓ|}) (Thunk {|!ℓ|} F) (r => F))))).


[{|!ℓ|}, F, force] Thunk__force {|!ℓ|} F ({|!Thunk'constructor|} {|!ℓ|} F force) --> force.
 
TYPE__Colist : (a : univ.Lvl) -> (A : Agda.Term (Agda.set (univ.s a)) (Agda.code (Agda.set a))) -> Type.
Colist : Agda.Term Agda.sortOmega (Agda.qLevel (a => Agda.set (univ.s a)) (a => Agda.prod (Agda.set (univ.s a)) (Agda.set (univ.s a)) (Agda.code (Agda.set a)) (A => (Agda.code (Agda.set a))))).
[a, A] Agda.Term _ (Colist a A) --> TYPE__Colist a A.
{|!Colist__[]|} : Agda.Term Agda.sortOmega (Agda.qLevel (a => Agda.set (univ.s a)) (a => Agda.prod (Agda.set (univ.s a)) (Agda.set a) (Agda.code (Agda.set a)) (A => (Colist a A)))).
{|!Colist___∷_|} : Agda.Term Agda.sortOmega (Agda.qLevel (a => Agda.set (univ.s a)) (a => Agda.prod (Agda.set (univ.s a)) (Agda.set a) (Agda.code (Agda.set a)) (A => (Agda.prod (Agda.set a) (Agda.set a) A (_0 => (Agda.prod (Agda.set a) (Agda.set a) (Thunk a (Colist a A)) (_0 => (Colist a A)))))))).



def zeros : Agda.Term (Agda.set univ.0) (Colist univ.0 Agda__Builtin__Nat.Nat).
def {|!'extendedlambda0|} : Agda.Term (Agda.set univ.0) (Thunk univ.0 (Colist univ.0 Agda__Builtin__Nat.Nat)).
[] zeros --> {|!Colist___∷_|} univ.0 Agda__Builtin__Nat.Nat Agda__Builtin__Nat.Nat__zero {|!'extendedlambda0|}.
 
[] Thunk__force {univ.0} {Colist univ.0 Agda__Builtin__Nat.Nat} {|!'extendedlambda0|} --> zeros.
 
def {|!Thunk^R|} : Agda.Term Agda.sortOmega (Agda.qLevel (f => Agda.sortOmega) (f => Agda.qLevel (g => Agda.sortOmega) (g => Agda.qLevel (r => Agda.set (univ.max univ.0 (univ.max (univ.s f) (univ.max (univ.s g) (univ.s r))))) (r => Agda.prod (Agda.set (univ.s f)) (Agda.set (univ.max univ.0 (univ.max f (univ.max (univ.s g) (univ.s r))))) (Agda.code (Agda.set f)) (F => (Agda.prod (Agda.set (univ.s g)) (Agda.set (univ.max univ.0 (univ.max f (univ.max g (univ.s r))))) (Agda.code (Agda.set g)) (G => (Agda.prod (Agda.set (univ.max univ.0 (univ.max f (univ.max g (univ.s r))))) (Agda.set (univ.max univ.0 (univ.max f (univ.max g (univ.s r))))) (Agda.prod (Agda.set f) (Agda.set (univ.max univ.0 (univ.max g (univ.s r)))) F (_0 => (Agda.prod (Agda.set g) (Agda.set (univ.s r)) G (_0 => (Agda.code (Agda.set r)))))) (R => (Agda.prod (Agda.set f) (Agda.set (univ.max univ.0 (univ.max g (univ.s r)))) (Thunk f F) (tf => (Agda.prod (Agda.set g) (Agda.set (univ.s r)) (Thunk g G) (tg => (Agda.code (Agda.set r))))))))))))))).
[f, g, r, F, G, R, tf, tg] {|!Thunk^R|} f g r F G R tf tg --> Thunk r (R (Thunk__force f F tf) (Thunk__force g G tg)).
 
