A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)).

B : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)).

{|!TYPE___≡_|} : (S : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (_0 : Agda.Term (Agda.set univ.0) S) -> (_0 : Agda.Term (Agda.set univ.0) S) -> Type.
{|!_≡_|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (S => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) S (_0 => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) S (_0 => (Agda.code (Agda.set univ.0)))))))).
[S, x0, x] Agda.Term _ ({|!_≡_|} S x0 x) --> {|!TYPE___≡_|} S x0 x.
{|!_≡___refl|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (S => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) S (a => ({|!_≡_|} S a a))))).


def cong : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (_0 => B)) (f => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_≡_|} A x y) (_0 => ({|!_≡_|} B (f x) (f y)))))))))))))).
[A, B, x, f] cong A B x x f ({|!_≡___refl|} A x) --> {|!_≡___refl|} B (f x).
 
