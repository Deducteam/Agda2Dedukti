{|!TYPE___≡_|} : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (_0 : Agda.Term (Agda.set univ.0) A) -> (_0 : Agda.Term (Agda.set univ.0) A) -> Type.
{|!_≡_|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) A (_0 => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) A (_0 => (Agda.code (Agda.set univ.0)))))))).
[A, x0, x] Agda.Term _ ({|!_≡_|} A x0 x) --> {|!TYPE___≡_|} A x0 x.
{|!_≡___refl|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => ({|!_≡_|} A x x))))).


def trans : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A ({|!z|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_≡_|} A x y) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_≡_|} A y {|!z|}) (_0 => ({|!_≡_|} A x {|!z|}))))))))))))).
[A, x0, y, x] trans A x0 y y x ({|!_≡___refl|} A y) --> x.
 
def cong : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (_0 => B)) (f => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_≡_|} A x y) (_0 => ({|!_≡_|} B (f x) (f y)))))))))))))).
[A, B, x, f] cong A B x x f ({|!_≡___refl|} A x) --> {|!_≡___refl|} B (f x).
 
