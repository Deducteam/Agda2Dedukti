{|!TYPE___≡_|} : (A : Agda.Term (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0))) -> (_0 : Agda.Term (Agda.set univ.0) A) -> (_0 : Agda.Term (Agda.set univ.0) A) -> Type.
{|!_≡_|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) A (_0 => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s univ.0)) A (_0 => (Agda.code (Agda.set univ.0)))))))).
[A, x0, x] Agda.Term _ ({|!_≡_|} A x0 x) --> {|!TYPE___≡_|} A (Agda.etaExpand univ.0 A x0) (Agda.etaExpand univ.0 A x).
{|!_≡___refl|} : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => ({|!_≡_|} A (Agda.etaExpand univ.0 A x) (Agda.etaExpand univ.0 A x)))))).
[A, x] Agda.etaExpand _ ({|!_≡_|} _ _ _) ({|!_≡___refl|} A x) --> {|!_≡___refl|} A (Agda.etaExpand univ.0 A x).
 

def trans : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A ({|!z|} => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_≡_|} A (Agda.etaExpand univ.0 A x) (Agda.etaExpand univ.0 A y)) (_0 => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_≡_|} A (Agda.etaExpand univ.0 A y) (Agda.etaExpand univ.0 A {|!z|})) (_0 => ({|!_≡_|} A (Agda.etaExpand univ.0 A x) (Agda.etaExpand univ.0 A {|!z|})))))))))))))).
[A, x0, y, x] trans A x0 y {Agda.etaExpand univ.0 A y} x ({|!_≡___refl|} A {Agda.etaExpand univ.0 A y}) --> Agda.etaExpand univ.0 ({|!_≡_|} A (Agda.etaExpand univ.0 A x0) (Agda.etaExpand univ.0 A y)) x.
 
def cong : Agda.Term (Agda.set (univ.s univ.0)) (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set (univ.s univ.0)) (Agda.code (Agda.set univ.0)) (A => (Agda.prod (Agda.set (univ.s univ.0)) (Agda.set univ.0) (Agda.code (Agda.set univ.0)) (B => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (x => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (y => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) (Agda.prod (Agda.set univ.0) (Agda.set univ.0) A (_0 => B)) (f => (Agda.prod (Agda.set univ.0) (Agda.set univ.0) ({|!_≡_|} A (Agda.etaExpand univ.0 A x) (Agda.etaExpand univ.0 A y)) (_0 => ({|!_≡_|} B (Agda.etaExpand univ.0 B (f (Agda.etaExpand univ.0 A x))) (Agda.etaExpand univ.0 B (f (Agda.etaExpand univ.0 A y)))))))))))))))).
[A, B, x, f] cong A B x {Agda.etaExpand univ.0 A x} f ({|!_≡___refl|} A {Agda.etaExpand univ.0 A x}) --> Agda.etaExpand univ.0 ({|!_≡_|} B (Agda.etaExpand univ.0 B (f (Agda.etaExpand univ.0 A x))) (Agda.etaExpand univ.0 B (f (Agda.etaExpand univ.0 A x)))) ({|!_≡___refl|} B (Agda.etaExpand univ.0 B (f (Agda.etaExpand univ.0 A x)))).
 
