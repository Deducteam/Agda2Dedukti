def {|¬_|} : Agda.Term Agda.sortOmega (Agda.qLevel ({|ℓ|} => Agda.set (univ.s {|ℓ|})) ({|ℓ|} => Agda.prod (Agda.set (univ.s {|ℓ|})) (Agda.set (univ.s {|ℓ|})) (Agda.code (Agda.set {|ℓ|})) (_0 => (Agda.code (Agda.set {|ℓ|}))))).
[{|ℓ|}, x] {|¬_|} {|ℓ|} x --> Agda.prod (Agda.set {|ℓ|}) (Agda.set univ.0) x (_0 => Data__Empty.{|⊥|}).
 
TYPE__Reflects : (p : univ.Lvl) -> (P : Agda.Term (Agda.set (univ.s p)) (Agda.code (Agda.set p))) -> (_0 : Agda.Term (Agda.set univ.0) Agda__Builtin__Bool.Bool) -> Type.
Reflects : Agda.Term Agda.sortOmega (Agda.qLevel (p => Agda.set (univ.s p)) (p => Agda.prod (Agda.set (univ.s p)) (Agda.set (univ.s p)) (Agda.code (Agda.set p)) (P => (Agda.prod (Agda.set univ.0) (Agda.set (univ.s p)) Agda__Builtin__Bool.Bool (_0 => (Agda.code (Agda.set p))))))).
[p, P, x] Agda.Term _ (Reflects p P x) --> TYPE__Reflects p P (Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool x).
{|Reflects__ofʸ|} : Agda.Term Agda.sortOmega (Agda.qLevel (p => Agda.set (univ.s p)) (p => Agda.prod (Agda.set (univ.s p)) (Agda.set p) (Agda.code (Agda.set p)) (P => (Agda.prod (Agda.set p) (Agda.set p) P (p0 => (Reflects p P (Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool Agda__Builtin__Bool.Bool__true))))))).
{|Reflects__ofⁿ|} : Agda.Term Agda.sortOmega (Agda.qLevel (p => Agda.set (univ.s p)) (p => Agda.prod (Agda.set (univ.s p)) (Agda.set p) (Agda.code (Agda.set p)) (P => (Agda.prod (Agda.set p) (Agda.set p) ({|¬_|} p P) ({|¬p|} => (Reflects p P (Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool Agda__Builtin__Bool.Bool__false))))))).
[p0, P, p] Agda.etaExpand _ (Reflects _ _ _) ({|Reflects__ofʸ|} p0 P p) --> {|Reflects__ofʸ|} p0 P (Agda.etaExpand p0 P p).
[p, P, {|¬p|}] Agda.etaExpand _ (Reflects _ _ _) ({|Reflects__ofⁿ|} p P {|¬p|}) --> {|Reflects__ofⁿ|} p P (Agda.etaExpand p ({|¬_|} p P) {|¬p|}).
 


TYPE__Dec : (p : univ.Lvl) -> (P : Agda.Term (Agda.set (univ.s p)) (Agda.code (Agda.set p))) -> Type.
Dec : Agda.Term Agda.sortOmega (Agda.qLevel (p => Agda.set (univ.s p)) (p => Agda.prod (Agda.set (univ.s p)) (Agda.set (univ.s p)) (Agda.code (Agda.set p)) (P => (Agda.code (Agda.set p))))).
[p, P] Agda.Term _ (Dec p P) --> TYPE__Dec p P.
def Dec__does : Agda.Term Agda.sortOmega (Agda.qLevel (p => Agda.set (univ.s p)) (p => Agda.prod (Agda.set (univ.s p)) (Agda.set p) (Agda.code (Agda.set p)) (P => (Agda.proj_prod (Agda.set p) (Agda.set univ.0) (Dec p P) (r => Agda__Builtin__Bool.Bool))))).
def Dec__proof : Agda.Term Agda.sortOmega (Agda.qLevel (p => Agda.set (univ.s p)) (p => Agda.prod (Agda.set (univ.s p)) (Agda.set p) (Agda.code (Agda.set p)) (P => (Agda.proj_prod (Agda.set p) (Agda.set p) (Dec p P) (r => (Reflects p P (Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool (Dec__does p P r)))))))).
_because_ : Agda.Term Agda.sortOmega (Agda.qLevel (p => Agda.set (univ.s p)) (p => Agda.prod (Agda.set (univ.s p)) (Agda.set p) (Agda.code (Agda.set p)) (P => (Agda.prod (Agda.set univ.0) (Agda.set p) Agda__Builtin__Bool.Bool (does => (Agda.prod (Agda.set p) (Agda.set p) (Reflects p P (Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool does)) (proof => (Dec p P)))))))).
[p, P, y] Agda.etaExpand _ (Dec p P) y --> _because_ p P (Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool (Dec__does p P y)) (Agda.etaExpand p (Reflects p P (Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool (Dec__does p P y))) (Dec__proof p P y)).
 
[p, P, does, proof] Dec__does p P (_because_ p P does proof) --> Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool does.
 
[p, P, does, proof] Dec__proof p P (_because_ p P does proof) --> Agda.etaExpand p (Reflects p P (Agda.etaExpand univ.0 Agda__Builtin__Bool.Bool does)) proof.
 

def recompute : Agda.Term Agda.sortOmega (Agda.qLevel (a => Agda.set (univ.s a)) (a => Agda.prod (Agda.set (univ.s a)) (Agda.set a) (Agda.code (Agda.set a)) (A => (Agda.prod (Agda.set a) (Agda.set a) (Dec a A) (_0 => (Agda.prod (Agda.set a) (Agda.set a) A (_0 => A))))))).
[a, A, {|¬p|}, x] recompute a A (_because_ a A Agda__Builtin__Bool.Bool__false ({|Reflects__ofⁿ|} a A {|¬p|})) x --> Agda.etaExpand a A (Data__Empty__Irrelevant.{|⊥-elim|} a A (Agda.etaExpand univ.0 Data__Empty.{|⊥|} ({|¬p|} (Agda.etaExpand a A x)))).
[a, A, p, x] recompute a A (_because_ a A Agda__Builtin__Bool.Bool__true ({|Reflects__ofʸ|} a A p)) x --> Agda.etaExpand a A p.
 
def Irrelevant : Agda.Term Agda.sortOmega (Agda.qLevel (p => Agda.set (univ.s p)) (p => Agda.prod (Agda.set (univ.s p)) (Agda.set (univ.s p)) (Agda.code (Agda.set p)) (_0 => (Agda.code (Agda.set p))))).
[p, x] Irrelevant p x --> Agda.prod (Agda.set p) (Agda.set p) x ({|p₁|} => (Agda.prod (Agda.set p) (Agda.set p) x ({|p₂|} => (Agda__Builtin__Equality.{|_≡_|} p x (Agda.etaExpand p x {|p₁|}) (Agda.etaExpand p x {|p₂|}))))).
 
