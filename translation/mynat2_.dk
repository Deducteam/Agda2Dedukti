L : Type.
O : L.
S : L -> L.
def max : L -> L ->L.
[x, y] max (S x) (S y) --> S (max x y).
[x]    max x     O     --> x.
[x]    max O     x     --> x.

Sort : Type.
U : Sort -> Type.
Set : L -> Sort.
Prop : Sort.

def El : (s : Sort) -> U s -> Type.

def Ax : Sort -> Sort.
[]  Ax Prop    --> Set O.
[n] Ax (Set n) --> Set (S n).

def prod : Sort -> Sort -> Sort.
[]     prod Prop     Prop     --> Prop.
[i, j] prod (Set i)  (Set j)  --> Set (max i j)
[i]    prod (Set i)  Prop     --> Prop.
[i]    prod Prop     (Set i)  --> Set i.

def code : (s : Sort) -> U (Ax s).
[s] El _ (code s) --> U s.

Pi : (s : Sort) -> (s' : Sort) -> (A : U s) -> (El s A -> U s') -> U (prod s s').
[s, s', A, B] El _ (Pi s s' A B) --> (x : El s A) -> El s' (B x).


TYPE__N : Type.
N : El (Set (S O)) (code (Set O)).
[] El _ N --> TYPE__N.
N__zero : El (Set O) N.
N__suc : El (Set O) (Pi (Set O) (Set O) N (_0 => N)).
TYPE__Eq : (A : El (Set (S O)) (code (Set O))) -> (_0 : El (Set O) A) -> (_0 : El (Set O) A) -> Type.
Eq : El (Set (S O)) (Pi (Set (S O)) (Set (S O)) (code (Set O)) (A => Pi (Set O) (Set (S O)) A (_0 => Pi (Set O) (Set (S O)) A (_0 => code (Set O))))).
[A, x0, x] El _ (Eq A x0 x) --> TYPE__Eq A x0 x.
Eq__refl : El (Set (S O)) (Pi (Set (S O)) (Set O) (code (Set O)) (A => Pi (Set O) (Set O) A (a => Eq A a a))).
def cong : El (Set O) (Pi (Set O) (Set O) N (x => Pi (Set O) (Set O) N (y => Pi (Set O) (Set O) (Eq N x y) (_0 => Pi (Set O) (Set O) (Pi (Set O) (Set O) N (_0 => N)) (f => Eq N (f x) (f y) ))))).
def sum : El (Set O) (Pi (Set O) (Set O) N (_0 => Pi (Set O) (Set O) N (_0 => N))).
def sum0 : El (Set O) (Pi (Set O) (Set O) N (x => Eq N x (sum x N__zero))).
