(; Sorts ;)

Sort : Type.

set  : universeLevel.Lvl -> Sort.
prop : universeLevel.Lvl -> Sort.
setOmega : Sort.

(; Universe successors ;)
def succ : Sort -> Sort.
[i] succ (set i)  --> set (universeLevel.s i).
[i] succ (prop i) --> set (universeLevel.s i).

(; Universe product rules ;)
def rule : Sort -> Sort -> Sort.
[i, j] rule (set i)  (set j)  --> set  (universeLevel.max i j).
[i, j] rule (set i)  (prop j) --> prop (universeLevel.max i j).
[i, j] rule (prop i) (set j)  --> set  (universeLevel.max i j).
[i, j] rule (prop i) (prop j) --> prop (universeLevel.max i j).
[]     rule _        setOmega --> setOmega.

(; Types and terms ;)

Univ : s : Sort -> Type.
def Term : s : Sort -> a : Univ s -> Type.

univ : s : Sort -> Univ (succ s).
prod : s1 : Sort -> s2 : Sort -> A : Univ s1 -> B : (Term s1 A -> Univ s2) -> Univ (rule s1 s2).
proj_prod : s1 : Sort -> s2 : Sort -> A : Univ s1 -> B : (Term s1 A -> Univ s2) -> Univ (rule s1 s2).

qLevel : f: (universeLevel.Lvl -> Sort) -> (l : universeLevel.Lvl -> Univ (f l)) -> Univ setOmega.

[s] Term _ (univ s) --> Univ s.
[f, t] Term _ (qLevel f t) --> l : universeLevel.Lvl -> Term (f l) (t l).

def etaExpand : (l : universeLevel.Lvl) -> (A : Univ (set l)) -> Term (set l) A -> Term (set l) A.

[a, b, A, B] Term _ (prod (set a) b A B) --> x : Term (set a) A -> Term b (B (etaExpand a A x)).
[a, b, A, B] Term _ (prod (prop a) b A B) --> x : Term (prop a) A -> Term b (B x).
[a, b, A, B] Term _ (proj_prod a  b A B) --> x : Term a A -> Term b (B x).

[l,A,x] etaExpand _ _ (etaExpand l A x) --> etaExpand l A x.
[x] etaExpand _ (univ _) x --> x.

[a,A,b,B,f] etaExpand _ (prod (set a)  (set b)  A B) f --> x : Term (set  a) A => etaExpand b (B (etaExpand a A x)) (f (etaExpand a A x)).
[a,A,b,B,f] etaExpand _ (prod (prop a) (set b)  A B) f --> x : Term (prop a) A => etaExpand b (B x) (f x).

[a,A,b,B,f] etaExpand _ (proj_prod a (set b) A B) f --> x : Term a A => etaExpand b (B x) (f x).
