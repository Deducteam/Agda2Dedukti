(; Sorts ;)

Sort : Type.

set  : universeLevel.Lvl -> Sort.
prop : universeLevel.Lvl -> Sort.
setOmega : Sort.

(; Universe successors ;)
def succ : Sort -> Sort.
[i] succ (set i) --> set (universeLevel.sucLvl i).
[i] succ (prop i) --> set (universeLevel.sucLvl i).

(; Universe product rules ;)
def rule : Sort -> Sort -> Sort.
[i, j] rule (set i) (set j) --> set (universeLevel.maxLvl i j).
[i, j] rule (set i) (prop j) --> prop (universeLevel.maxLvl i j).
[i, j] rule (prop i) (set j) --> set (universeLevel.maxLvl i j).
[i, j] rule (prop i) (prop j) --> prop (universeLevel.maxLvl i j).
[]     rule _        setOmega --> setOmega.

(; Types and terms ;)

Univ : s : Sort -> Type.
def Term : s : Sort -> a : Univ s -> Type.

univ : s : Sort -> Univ (succ s).
prod : s1 : Sort -> s2 : Sort -> a : Univ s1 -> b : (Term s1 a -> Univ s2) -> Univ (rule s1 s2).

qLevel : f: (universeLevel.Lvl -> Sort) -> (l : universeLevel.Lvl -> Univ (f l)) -> Univ setOmega.

[s] Term _ (univ s) --> Univ s.
[s1, s2, a, b]
    Term _ (prod s1 s2 a b) --> x : Term s1 a -> Term s2 (b x).
[f, t] Term _ (qLevel f t) --> l : universeLevel.Lvl -> Term (f l) (t l).

def etaExpand : (l : universeLevel.Lvl) -> (A : Univ (set l)) -> Term (set l) A -> Term (set l) A.

[x] etaExpand _ (univ _) x --> x.
[a,A,n,B,f] etaExpand _ (prod a (set n) A B) f --> x : Term a A => etaExpand n (B x) (f x)
[n,A,x] etaExpand n A (etaExpand n A x) --> etaExpand n A x.
