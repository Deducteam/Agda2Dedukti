
(; The usual encoding of Natural Number (Peano like) ;)

Nat : Type.

0_N : Nat.
s_N : Nat -> Nat.
def 1_N := s_N 0_N.

def max_N : Nat -> Nat -> Nat.
[y]   max_N 0_N     y       --> y.
[x]   max_N x       0_N     --> x.
[x,y] max_N (s_N x) (s_N y) --> s_N (max_N x y).

(; The function plus is not in the grammar, however it is required to compute. ;)

def plus_N : Nat -> Nat -> Nat.
[y]   plus_N 0_N     y --> y.
[x,y] plus_N (s_N x) y --> s_N (plus_N x y).

(; The type of level and an intermediary type encoding (somehow) a set of levels. ;)

Lvl : Type.
LvlSet : Type.

(; The grammar we are interested in is
   t,u ::= x | 0 | s t | max t u
with x a variable. ;)

(; Nothing is definable, since it is purely syntax. ;)
def 0 : Lvl.
def s : Lvl -> Lvl.
def max : Lvl -> Lvl -> Lvl.


(; The "constructor" of Lvl (between quotation marks, because it is a defined function, since some computation must be performed under a Max).
A Lvl in normal form is Max i {Plus j1 x1, Plus j2 x2,...} with i >= jk for all k. ;)
def Max : Nat -> LvlSet -> Lvl.

(; Encoding of sets of level ;)
(; Empty set ;)
Empty : LvlSet.
(; A singleton ;)
Plus : Nat -> Lvl -> LvlSet.
(; More elements ;)
defac Union [LvlSet].

[x]     Union x          Empty      --> x.
[i,j,l] Union (Plus i l) (Plus j l) --> Plus (max_N i j) l.

def mapPlus : Nat -> LvlSet -> LvlSet.
[i]       mapPlus i Empty         --> Empty.
[i,j,l]   mapPlus i (Plus j l)    --> Plus (plus_N i j) l.
[i,l1,l2] mapPlus i (Union l1 l2) --> Union (mapPlus i l1) (mapPlus i l2).

[i,j,k,l]    Max i   (Plus j (Max k l))            --> Max (max_N i (plus_N j k)) (mapPlus j l).
[i,j,k,l,tl] Max i   (Union (Plus j (Max k l)) tl) --> Max (max_N i (plus_N j k)) (Union (mapPlus j l) tl).
[x] Max 0_N (Plus 0_N x) --> x.

(; The reflection of the syntax on Lvl. ;)
[]    0       --> Max 0_N Empty.
[x]   s x     --> Max 1_N (Plus 1_N x).
[x,y] max x y --> Max 0_N (Union (Plus 0_N x) (Plus 0_N y)).
